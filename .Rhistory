###########################################################################################
# CHANGE THIS > Path to computed results folder here (generated from jupyter notebook)    #
r_folder <- "../Past_experiments/Pilot2/computed_data/"
###########################################################################################
# CHANGE THIS > Path to computed results folder here (generated from jupyter notebook)    #
r_folder <- "../Past_experiments/Pilot2/computed_data/"
###########################################################################################
# Declaring files containing answers and participants.
results_file = paste(r_folder,"data_all_ans.csv", sep="")
participant_file = paste(r_folder,"data_all_participants.csv", sep="")
# Loading data
results <- read_csv(results_file, col_types = cols('i','i','l','c','c','f','c','l','f','i','i'))
participants <- read_csv(participant_file, col_types=cols('f','n', 'i','n','n','l', 'l'))
###########################################################################################
# CHANGE THIS > Path to computed results folder here (generated from jupyter notebook)    #
r_folder <- "../Past_experiments/Pilot2/computed_data/"
###########################################################################################
# Declaring files containing answers and participants.
results_file = paste(r_folder,"data_all_ans.csv", sep="")
participant_file = paste(r_folder,"data_all_participants.csv", sep="")
# Loading data
results <- read_csv(results_file, col_types = cols('i','i','l','c','c','f','c','l','f','i','i'))
participants <- read_csv(participant_file, col_types=cols('f','n', 'i','n','n','l', 'l'))
# Splitting the data set into results from the training round and from the experiment round.
exp_results <- results %>%
filter(final == T) %>%
mutate(c_name = str_remove(c_name, '_n_0[:digit:]')) %>%
mutate(img = as.factor(str_remove(img, '_n_0[:digit:]'))) %>%
mutate(branch = as.factor(str_remove(branch, '.n.0[:digit:]'))) %>%
mutate(stimulus = as.factor(paste(c_name, img, sep = "|")))
train_results <- results %>%
filter(final == F) %>%
mutate(c_name = str_remove(c_name, '_n_0[:digit:]')) %>%
mutate(img = as.factor(str_remove(img, '_n_0[:digit:]'))) %>%
mutate(branch = as.factor(str_remove(branch, '.n.0[:digit:]'))) %>%
mutate(stimulus = as.factor(paste(c_name, img, sep = "|")))
# Some constants needed in latter calculations.
trial_num <- length(exp_results$index)
p_num <- length(unique(exp_results$p_id))
part_id <- sort(c(1:trial_num)%%p_num)+1
stim_num <- trial_num/p_num
rt_mean <- mean(exp_results$react_time)
acc_mean <- mean(exp_results$accurate)
summary(exp_results[c("stimulus", "lvl", "branch", "p_id", "accurate", "react_time")])
plot_basic_results <- ggplot(exp_results, mapping = aes(x=lvl, y=react_time/1000)) +
geom_boxplot() +
geom_boxplot(data=exp_results, mapping = aes(x=stim_type, y=react_time/1000)) +
labs(title = "Basic reaction time overview.") +
xlab("Grouping of interest") +
ylab("Reaction Time (sec)") +
scale_x_discrete(limits = c("hypernym","bl","hyponym", "TRUE", "FALSE")) +
scale_y_continuous(n.breaks = 10) +
scale_fill_stata()
plot_basic_results
mistakes_by_branch <- exp_results %>%
group_by(stimulus,branch,accurate) %>%
tally()
plot_mistakes_by_branch <- ggplot(mistakes_by_branch, aes(x=branch, y=n, fill=as.factor(accurate)))+
geom_col() +
labs(title = "Trials per branch", subtitle = "Accurate/Inaccurate answers highlighted by color",
fill="Accurate") +
xlab("Category Branches") +
ylab("Count of trials") +
scale_y_continuous(n.breaks=10) +
theme(axis.text.x = element_text(vjust = 1, hjust = 0.5, size = 7))
plot_mistakes_by_branch
rtOV <- exp_results %>%
group_by(stimulus, lvl, stim_type) %>%
summarize(rt_mean = mean(react_time))
rtOV_viz <- ggplot(rtOV, aes(x=rt_mean, fill=lvl))+
geom_histogram(bins = 15, position="dodge") +
ylab("Stimulus counts") +
xlab("Reaction Time (msec)")+
labs(title="Distribution of stimuli frequencies.", fill="Category\nLevel")
rtOV_viz
rt_box <- ggplot(rtOV, aes(x=rt_mean, fill=lvl))+
geom_boxplot()+
facet_grid(rtOV$stim_type)+
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major.x = element_line(),
panel.grid.minor.x = element_line(color="#c0c0c0", size=0.5))+
scale_x_continuous(n.breaks = 14) +
labs(fill="",
title="Box plots of reaction time means over all stimuli") +
xlab("Reaction Time (msec)")
rt_box
library(reshape2)
rtable <- exp_results %>%
filter(index>100) %>%
filter(p_id != 1) %>%
filter(react_time < 10000)%>%
group_by(lvl, stim_type) %>%
summarize(rt_mean = mean(react_time))
rmatrix <- matrix(c(1:6),nrow = 2, ncol=3,dimnames = list(c("T", "F"),c("Superordinate", "Basic Level", "Subordinate")))
for(i in 1:6){
lev <- rtable$lvl[i]
typ <- rtable$stim_type[i]
val <- rtable$rt_mean[i]
if (lev == "hypernym" & typ == TRUE){
rmatrix['T',"Superordinate"] <- val
} else if(lev == "hypernym" & typ == FALSE){
rmatrix['F',"Superordinate"] <- val
} else if(lev == "bl" & typ == TRUE){
rmatrix['T',"Basic Level"] <- val
} else if(lev == "bl" & typ == FALSE){
rmatrix['F',"Basic Level"] <- val
} else if(lev == "hyponym" & typ == TRUE){
rmatrix['T',"Subordinate"] <- val
} else if(lev == "hyponym" & typ == FALSE){
rmatrix['F',"Subordinate"] <- val
}
}
print(rmatrix)
rt_true <- exp_results %>%
filter(stim_type == TRUE)%>%
filter(p_id != 1 & p_id != 11)%>%
filter(react_time<8000) %>%
select(lvl, c_name, react_time) %>%
mutate(c_name = as.factor(c_name))
rt_false <- exp_results %>%
filter(stim_type == F)%>%
filter(p_id != 1 & p_id != 11)%>%
filter(react_time<8000) %>%
select(lvl, c_name, react_time) %>%
mutate(c_name = as.factor(c_name))
roschAOV_true <- aov(react_time ~ lvl + c_name, data = rt_true)
roschAOV_false <- aov(react_time ~ lvl + c_name, data = rt_false)
tukey_r_true <- TukeyHSD(roschAOV_true, which = 'lvl')
tukey_r_false <- TukeyHSD(roschAOV_false, which = 'lvl')
rt_true <- exp_results %>%
filter(stim_type == TRUE)%>%
filter(p_id != 1 & p_id != 11)%>%
filter(react_time<8000) %>%
select(lvl, c_name, react_time) %>%
mutate(c_name = as.factor(c_name))
rt_false <- exp_results %>%
filter(stim_type == F)%>%
filter(p_id != 1 & p_id != 11)%>%
filter(react_time<8000) %>%
select(lvl, c_name, react_time) %>%
mutate(c_name = as.factor(c_name))
roschAOV_true <- aov(react_time ~ lvl + c_name, data = rt_true)
roschAOV_false <- aov(react_time ~ lvl + c_name, data = rt_false)
tukey_r_true <- TukeyHSD(roschAOV_true, which = 'lvl')
tukey_r_false <- TukeyHSD(roschAOV_false, which = 'lvl')
summary.aov(roschAOV_true)
tukey_r_true
plot(tukey_r_true)
summary.aov(roschAOV_false)
tukey_r_false
plot(tukey_r_false)
###########################################################################################
# CHANGE THIS > Path to computed results folder here (generated from jupyter notebook)    #
r_folder <- "../Past_experiments/Final_Experiment/computed_data/"
###########################################################################################
# Declaring files containing answers and participants.
results_file = paste(r_folder,"data_all_ans.csv", sep="")
participant_file = paste(r_folder,"data_all_participants.csv", sep="")
# Loading data
results <- read_csv(results_file, col_types = cols('i','i','l','c','c','f','c','l','f','i','i'))
participants <- read_csv(participant_file, col_types=cols('f','n', 'i','n','n','l', 'l'))
# Splitting the data set into results from the training round and from the experiment round.
exp_results <- results %>%
filter(final == T) %>%
mutate(c_name = str_remove(c_name, '_n_0[:digit:]')) %>%
mutate(img = as.factor(str_remove(img, '_n_0[:digit:]'))) %>%
mutate(branch = as.factor(str_remove(branch, '.n.0[:digit:]'))) %>%
mutate(stimulus = as.factor(paste(c_name, img, sep = "|")))
train_results <- results %>%
filter(final == F) %>%
mutate(c_name = str_remove(c_name, '_n_0[:digit:]')) %>%
mutate(img = as.factor(str_remove(img, '_n_0[:digit:]'))) %>%
mutate(branch = as.factor(str_remove(branch, '.n.0[:digit:]'))) %>%
mutate(stimulus = as.factor(paste(c_name, img, sep = "|")))
# Some constants needed in latter calculations.
trial_num <- length(exp_results$index)
p_num <- length(unique(exp_results$p_id))
part_id <- sort(c(1:trial_num)%%p_num)+1
stim_num <- trial_num/p_num
rt_mean <- mean(exp_results$react_time)
acc_mean <- mean(exp_results$accurate)
summary(exp_results[c("stimulus", "lvl", "branch", "p_id", "accurate", "react_time")])
rtOV <- exp_results %>%
group_by(stimulus, lvl, stim_type) %>%
summarize(rt_mean = mean(react_time))
rtOV_viz <- ggplot(rtOV, aes(x=rt_mean, fill=lvl))+
geom_histogram(bins = 15, position="dodge") +
ylab("Stimulus counts") +
xlab("Reaction Time (msec)")+
labs(title="Distribution of stimuli frequencies.", fill="Category\nLevel")
rtOV_viz
rt_box <- ggplot(rtOV, aes(x=rt_mean, fill=lvl))+
geom_boxplot()+
facet_grid(rtOV$stim_type)+
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major.x = element_line(),
panel.grid.minor.x = element_line(color="#c0c0c0", size=0.5))+
scale_x_continuous(n.breaks = 14) +
labs(fill="",
title="Box plots of reaction time means over all stimuli") +
xlab("Reaction Time (msec)")
rt_box
library(reshape2)
rtable <- exp_results %>%
filter(index>100) %>%
filter(p_id != 1) %>%
filter(react_time < 10000)%>%
group_by(lvl, stim_type) %>%
summarize(rt_mean = mean(react_time))
rmatrix <- matrix(c(1:6),nrow = 2, ncol=3,dimnames = list(c("T", "F"),c("Superordinate", "Basic Level", "Subordinate")))
for(i in 1:6){
lev <- rtable$lvl[i]
typ <- rtable$stim_type[i]
val <- rtable$rt_mean[i]
if (lev == "hypernym" & typ == TRUE){
rmatrix['T',"Superordinate"] <- val
} else if(lev == "hypernym" & typ == FALSE){
rmatrix['F',"Superordinate"] <- val
} else if(lev == "bl" & typ == TRUE){
rmatrix['T',"Basic Level"] <- val
} else if(lev == "bl" & typ == FALSE){
rmatrix['F',"Basic Level"] <- val
} else if(lev == "hyponym" & typ == TRUE){
rmatrix['T',"Subordinate"] <- val
} else if(lev == "hyponym" & typ == FALSE){
rmatrix['F',"Subordinate"] <- val
}
}
print(rmatrix)
rt_true <- exp_results %>%
filter(stim_type == TRUE)%>%
filter(p_id != 1 & p_id != 11)%>%
filter(react_time<8000) %>%
select(lvl, c_name, react_time) %>%
mutate(c_name = as.factor(c_name))
rt_false <- exp_results %>%
filter(stim_type == F)%>%
filter(p_id != 1 & p_id != 11)%>%
filter(react_time<8000) %>%
select(lvl, c_name, react_time) %>%
mutate(c_name = as.factor(c_name))
roschAOV_true <- aov(react_time ~ lvl + c_name, data = rt_true)
roschAOV_false <- aov(react_time ~ lvl + c_name, data = rt_false)
tukey_r_true <- TukeyHSD(roschAOV_true, which = 'lvl')
tukey_r_false <- TukeyHSD(roschAOV_false, which = 'lvl')
summary.aov(roschAOV_true)
tukey_r_true
plot(tukey_r_true)
summary.aov(roschAOV_false)
summary.aov(roschAOV_false)
tukey_r_false
plot(tukey_r_false)
df_for_rating <- exp_results %>%
filter(stim_type == TRUE) %>%
group_by(lvl, c_name, branch, img) %>%
summarise(rt_mean = mean(react_time), acc_mean = mean(accurate)) %>%
mutate(lvl = ifelse(lvl=='hyponym', 'sub', ifelse(lvl=='hypernym', 'super', 'bl')))
all_img <- unique(df_for_rating$img)
df_rated_simple <- data.frame()
for (imag in all_img){
triple <- df_for_rating %>%
filter(img == imag)
blvl <- triple[which(triple$rt_mean == min(triple$rt_mean)),]
triple <- triple[which(triple$rt_mean != min(triple$rt_mean)),]
blvl$proj_lvl <- 'bl'
if(blvl$lvl == 'super'){
triple$proj_lvl <- 'sub'
df_rated_simple <- rbind(df_rated_simple, blvl)
df_rated_simple <- rbind(df_rated_simple, triple)
} else if(blvl$lvl == 'bl'){
sublvl <- triple[which(triple$lvl == "sub"),]
sublvl$proj_lvl <- "sub"
suplvl <- triple[which(triple$lvl == "super"),]
suplvl$proj_lvl <- "super"
df_rated_simple <- rbind(df_rated_simple, suplvl)
df_rated_simple <- rbind(df_rated_simple, blvl)
df_rated_simple <- rbind(df_rated_simple, sublvl)
} else{
triple$proj_lvl <- 'super'
df_rated_simple <- rbind(df_rated_simple, blvl)
df_rated_simple <- rbind(df_rated_simple, triple)
}
}
df_rated_simple$lvl <- as.factor(df_rated_simple$lvl)
df_rated_simple$proj_lvl <- as.factor(df_rated_simple$proj_lvl)
head(df_rated_simple[c("c_name", "lvl", "proj_lvl")], n = 9)
library(caret)
con_mat_bl <- confusionMatrix(data=df_rated_simple$proj_lvl, reference = df_rated_simple$lvl)
con_mat_bl
rt_acc <- exp_results %>%
filter(p_id != '1') %>%
mutate(type = ifelse(stim_type * accurate == 1, 1,ifelse(stim_type & accurate == 0, 3,ifelse(!stim_type & accurate == 1, 2, 4)))) %>%
group_by(react_time, p_id, c_name, type) %>%
count() %>%
mutate(type = as.factor(type)) %>%
filter(c_name != 'furniture_n_01' & c_name != 'clothing_n_01' & c_name != 'edible_fruit_n_01' & c_name != 'musical_instrument_n_01' & c_name != 'hand_tool_n_01')
rated_df <- df_rated_simple[c('c_name', 'lvl')] %>%
filter(c_name != 'furniture_n_01' & c_name != 'clothing_n_01' & c_name != 'edible_fruit_n_01' & c_name != 'musical_instrument_n_01' & c_name != 'hand_tool_n_01')
rated_df_rts <- merge(rt_acc, rated_df, all.x=T)
effect_comparison <- ggplot(data=rated_df_rts,
mapping=aes(x=react_time, y=c_name), color=lvl) +
geom_point() +
facet_wrap(rated_df_rts$type)+
coord_cartesian(xlim=c(400,1000))
effect_comparison
effect_comparison <- ggplot(data=rated_df_rts,
mapping=aes(x=react_time, y=c_name), color=lvl) +
geom_point() +
facet_wrap(rated_df_rts$type)
effect_comparison
rt_acc <- exp_results %>%
filter(p_id != '1') %>%
mutate(type = ifelse(stim_type * accurate == 1, 1,ifelse(stim_type & accurate == 0, 3,ifelse(!stim_type & accurate == 1, 2, 4)))) %>%
group_by(react_time, p_id, c_name, type) %>%
count() %>%
mutate(type = as.factor(type)) %>%
filter(c_name != 'furniture_n_01' & c_name != 'clothing_n_01' & c_name != 'edible_fruit_n_01' & c_name != 'musical_instrument_n_01' & c_name != 'hand_tool_n_01')%>%
filter(react_time < 8000)
rated_df <- df_rated_simple[c('c_name', 'lvl')] %>%
filter(c_name != 'furniture_n_01' & c_name != 'clothing_n_01' & c_name != 'edible_fruit_n_01' & c_name != 'musical_instrument_n_01' & c_name != 'hand_tool_n_01')
rated_df_rts <- merge(rt_acc, rated_df, all.x=T)
effect_comparison <- ggplot(data=rated_df_rts,
mapping=aes(x=react_time, y=c_name), color=lvl) +
geom_point() +
facet_wrap(rated_df_rts$type)
effect_comparison
View(df_rated_simple)
View(df_rated_simple)
df_for_rating <- exp_results %>%
group_by(lvl, c_name, branch, img) %>%
summarise(rt_mean = mean(react_time), acc_mean = mean(accurate)) %>%
mutate(lvl = ifelse(lvl=='hyponym', 'sub', ifelse(lvl=='hypernym', 'super', 'bl')))
all_img <- unique(df_for_rating$img)
df_rated_simple <- data.frame()
for (imag in all_img){
triple <- df_for_rating %>%
filter(img == imag)
blvl <- triple[which(triple$rt_mean == min(triple$rt_mean)),]
triple <- triple[which(triple$rt_mean != min(triple$rt_mean)),]
blvl$proj_lvl <- 'bl'
if(blvl$lvl == 'super'){
triple$proj_lvl <- 'sub'
df_rated_simple <- rbind(df_rated_simple, blvl)
df_rated_simple <- rbind(df_rated_simple, triple)
} else if(blvl$lvl == 'bl'){
sublvl <- triple[which(triple$lvl == "sub"),]
sublvl$proj_lvl <- "sub"
suplvl <- triple[which(triple$lvl == "super"),]
suplvl$proj_lvl <- "super"
df_rated_simple <- rbind(df_rated_simple, suplvl)
df_rated_simple <- rbind(df_rated_simple, blvl)
df_rated_simple <- rbind(df_rated_simple, sublvl)
} else{
triple$proj_lvl <- 'super'
df_rated_simple <- rbind(df_rated_simple, blvl)
df_rated_simple <- rbind(df_rated_simple, triple)
}
}
df_rated_simple$lvl <- as.factor(df_rated_simple$lvl)
df_rated_simple$proj_lvl <- as.factor(df_rated_simple$proj_lvl)
head(df_rated_simple[c("c_name", "lvl", "proj_lvl")], n = 9)
library(caret)
con_mat_bl <- confusionMatrix(data=df_rated_simple$proj_lvl, reference = df_rated_simple$lvl)
con_mat_bl
df_for_rating <- exp_results %>%
group_by(lvl, c_name, branch, img) %>%
summarise(rt_mean = mean(react_time), acc_mean = median(accurate)) %>%
mutate(lvl = ifelse(lvl=='hyponym', 'sub', ifelse(lvl=='hypernym', 'super', 'bl')))
all_img <- unique(df_for_rating$img)
df_rated_simple <- data.frame()
for (imag in all_img){
triple <- df_for_rating %>%
filter(img == imag)
blvl <- triple[which(triple$rt_mean == min(triple$rt_mean)),]
triple <- triple[which(triple$rt_mean != min(triple$rt_mean)),]
blvl$proj_lvl <- 'bl'
if(blvl$lvl == 'super'){
triple$proj_lvl <- 'sub'
df_rated_simple <- rbind(df_rated_simple, blvl)
df_rated_simple <- rbind(df_rated_simple, triple)
} else if(blvl$lvl == 'bl'){
sublvl <- triple[which(triple$lvl == "sub"),]
sublvl$proj_lvl <- "sub"
suplvl <- triple[which(triple$lvl == "super"),]
suplvl$proj_lvl <- "super"
df_rated_simple <- rbind(df_rated_simple, suplvl)
df_rated_simple <- rbind(df_rated_simple, blvl)
df_rated_simple <- rbind(df_rated_simple, sublvl)
} else{
triple$proj_lvl <- 'super'
df_rated_simple <- rbind(df_rated_simple, blvl)
df_rated_simple <- rbind(df_rated_simple, triple)
}
}
df_rated_simple$lvl <- as.factor(df_rated_simple$lvl)
df_rated_simple$proj_lvl <- as.factor(df_rated_simple$proj_lvl)
head(df_rated_simple[c("c_name", "lvl", "proj_lvl")], n = 9)
library(caret)
con_mat_bl <- confusionMatrix(data=df_rated_simple$proj_lvl, reference = df_rated_simple$lvl)
con_mat_bl
df_for_rating <- exp_results %>%
group_by(lvl, c_name, branch, img) %>%
summarise(rt_mean = mean(react_time), acc_mean = mean(accurate)) %>%
mutate(lvl = ifelse(lvl=='hyponym', 'sub', ifelse(lvl=='hypernym', 'super', 'bl')))
all_img <- unique(df_for_rating$img)
df_rated_simple <- data.frame()
for (imag in all_img){
triple <- df_for_rating %>%
filter(img == imag)
blvl <- triple[which(triple$rt_mean == min(triple$rt_mean)),]
triple <- triple[which(triple$rt_mean != min(triple$rt_mean)),]
blvl$proj_lvl <- 'bl'
if(blvl$lvl == 'super'){
triple$proj_lvl <- 'sub'
df_rated_simple <- rbind(df_rated_simple, blvl)
df_rated_simple <- rbind(df_rated_simple, triple)
} else if(blvl$lvl == 'bl'){
sublvl <- triple[which(triple$lvl == "sub"),]
sublvl$proj_lvl <- "sub"
suplvl <- triple[which(triple$lvl == "super"),]
suplvl$proj_lvl <- "super"
df_rated_simple <- rbind(df_rated_simple, suplvl)
df_rated_simple <- rbind(df_rated_simple, blvl)
df_rated_simple <- rbind(df_rated_simple, sublvl)
} else{
triple$proj_lvl <- 'super'
df_rated_simple <- rbind(df_rated_simple, blvl)
df_rated_simple <- rbind(df_rated_simple, triple)
}
}
df_rated_simple$lvl <- as.factor(df_rated_simple$lvl)
df_rated_simple$proj_lvl <- as.factor(df_rated_simple$proj_lvl)
head(df_rated_simple[c("c_name", "lvl", "proj_lvl")], n = 9)
library(caret)
con_mat_bl <- confusionMatrix(data=df_rated_simple$proj_lvl, reference = df_rated_simple$lvl)
con_mat_bl
df_for_rating <- exp_results %>%
filter(stim_type == F) %>%
group_by(lvl, c_name, branch, img) %>%
summarise(rt_mean = mean(react_time), acc_mean = mean(accurate)) %>%
mutate(lvl = ifelse(lvl=='hyponym', 'sub', ifelse(lvl=='hypernym', 'super', 'bl')))
all_img <- unique(df_for_rating$img)
df_rated_simple <- data.frame()
for (imag in all_img){
triple <- df_for_rating %>%
filter(img == imag)
blvl <- triple[which(triple$rt_mean == min(triple$rt_mean)),]
triple <- triple[which(triple$rt_mean != min(triple$rt_mean)),]
blvl$proj_lvl <- 'bl'
if(blvl$lvl == 'super'){
triple$proj_lvl <- 'sub'
df_rated_simple <- rbind(df_rated_simple, blvl)
df_rated_simple <- rbind(df_rated_simple, triple)
} else if(blvl$lvl == 'bl'){
sublvl <- triple[which(triple$lvl == "sub"),]
sublvl$proj_lvl <- "sub"
suplvl <- triple[which(triple$lvl == "super"),]
suplvl$proj_lvl <- "super"
df_rated_simple <- rbind(df_rated_simple, suplvl)
df_rated_simple <- rbind(df_rated_simple, blvl)
df_rated_simple <- rbind(df_rated_simple, sublvl)
} else{
triple$proj_lvl <- 'super'
df_rated_simple <- rbind(df_rated_simple, blvl)
df_rated_simple <- rbind(df_rated_simple, triple)
}
}
df_rated_simple$lvl <- as.factor(df_rated_simple$lvl)
df_rated_simple$proj_lvl <- as.factor(df_rated_simple$proj_lvl)
head(df_rated_simple[c("c_name", "lvl", "proj_lvl")], n = 9)
library(caret)
con_mat_bl <- confusionMatrix(data=df_rated_simple$proj_lvl, reference = df_rated_simple$lvl)
con_mat_bl
df_for_rating <- exp_results %>%
filter(stim_type == T) %>%
group_by(lvl, c_name, branch, img) %>%
summarise(rt_mean = mean(react_time), acc_mean = mean(accurate)) %>%
mutate(lvl = ifelse(lvl=='hyponym', 'sub', ifelse(lvl=='hypernym', 'super', 'bl')))
all_img <- unique(df_for_rating$img)
df_rated_simple <- data.frame()
for (imag in all_img){
triple <- df_for_rating %>%
filter(img == imag)
blvl <- triple[which(triple$rt_mean == min(triple$rt_mean)),]
triple <- triple[which(triple$rt_mean != min(triple$rt_mean)),]
blvl$proj_lvl <- 'bl'
if(blvl$lvl == 'super'){
triple$proj_lvl <- 'sub'
df_rated_simple <- rbind(df_rated_simple, blvl)
df_rated_simple <- rbind(df_rated_simple, triple)
} else if(blvl$lvl == 'bl'){
sublvl <- triple[which(triple$lvl == "sub"),]
sublvl$proj_lvl <- "sub"
suplvl <- triple[which(triple$lvl == "super"),]
suplvl$proj_lvl <- "super"
df_rated_simple <- rbind(df_rated_simple, suplvl)
df_rated_simple <- rbind(df_rated_simple, blvl)
df_rated_simple <- rbind(df_rated_simple, sublvl)
} else{
triple$proj_lvl <- 'super'
df_rated_simple <- rbind(df_rated_simple, blvl)
df_rated_simple <- rbind(df_rated_simple, triple)
}
}
df_rated_simple$lvl <- as.factor(df_rated_simple$lvl)
df_rated_simple$proj_lvl <- as.factor(df_rated_simple$proj_lvl)
head(df_rated_simple[c("c_name", "lvl", "proj_lvl")], n = 9)
library(caret)
con_mat_bl <- confusionMatrix(data=df_rated_simple$proj_lvl, reference = df_rated_simple$lvl)
con_mat_bl
