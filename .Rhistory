}
}
df_rated_simple2$lvl <- as.factor(df_rated_simple2$lvl)
df_rated_simple2$proj_lvl <- as.factor(df_rated_simple2$proj_lvl)
head(df_rated_simple2[c("c_name", "lvl", "proj_lvl")], n = 9)
library(caret)
con_mat_bl <- confusionMatrix(data=df_rated_simple$proj_lvl, reference = df_rated_simple$lvl)
con_mat_bl
con_mat_bl2 <- confusionMatrix(data=df_rated_simple2$proj_lvl, reference = df_rated_simple2$lvl)
con_mat_bl2
very_inaccurate <- exp_results %>%
group_by(c_name) %>%
summarise(acc = mean(accurate)) %>%
filter(acc > 0.89)
df_for_rating <- exp_results %>%
filter(stim_type == T) %>%
filter(c_name %in% very_inaccurate$c_name) %>%
group_by(lvl, c_name, branch, img) %>%
summarise(rt_median = median(react_time), acc_median = median(accurate)) %>%
mutate(lvl = ifelse(lvl=='hyponym', 'sub', ifelse(lvl=='hypernym', 'super', 'bl')))
very_inaccurate <- exp_results %>%
group_by(c_name) %>%
summarise(acc = mean(accurate)) %>%
filter(acc > 0.89)
df_for_rating <- exp_results %>%
filter(stim_type == T) %>%
filter(c_name %in% very_inaccurate$c_name) %>%
group_by(lvl, c_name, branch, img) %>%
summarise(rt_median = median(react_time), acc_median = median(accurate)) %>%
mutate(lvl = ifelse(lvl=='hyponym', 'sub', ifelse(lvl=='hypernym', 'super', 'bl')))
all_img <- unique(df_for_rating$img)
df_rated_simple2 <- data.frame()
for (imag in all_img){
triple <- df_for_rating %>%
filter(img == imag)
blvl <- triple[which(triple$rt_median == min(triple$rt_median)),]
triple <- triple[which(triple$rt_median != min(triple$rt_median)),]
blvl$proj_lvl <- 'bl'
if(length(blvl$lvl)>1){
print("Two fastest times")
} else if(blvl$lvl == 'super'){
triple$proj_lvl <- 'sub'
df_rated_simple2 <- rbind(df_rated_simple2, blvl)
df_rated_simple2 <- rbind(df_rated_simple2, triple)
} else if(blvl$lvl == 'bl'){
sublvl <- triple[which(triple$lvl == "sub"),]
sublvl$proj_lvl <- "sub"
suplvl <- triple[which(triple$lvl == "super"),]
suplvl$proj_lvl <- "super"
df_rated_simple2 <- rbind(df_rated_simple2, suplvl)
df_rated_simple2 <- rbind(df_rated_simple2, blvl)
df_rated_simple2 <- rbind(df_rated_simple2, sublvl)
} else{
triple$proj_lvl <- 'super'
df_rated_simple2 <- rbind(df_rated_simple2, blvl)
df_rated_simple2 <- rbind(df_rated_simple2, triple)
}
}
df_rated_simple2$lvl <- as.factor(df_rated_simple2$lvl)
df_rated_simple2$proj_lvl <- as.factor(df_rated_simple2$proj_lvl)
head(df_rated_simple2[c("c_name", "lvl", "proj_lvl")], n = 9)
library(caret)
con_mat_bl <- confusionMatrix(data=df_rated_simple$proj_lvl, reference = df_rated_simple$lvl)
con_mat_bl
con_mat_bl2 <- confusionMatrix(data=df_rated_simple2$proj_lvl, reference = df_rated_simple2$lvl)
con_mat_bl2
very_inaccurate <- exp_results %>%
group_by(c_name) %>%
summarise(acc = mean(accurate)) %>%
filter(acc < 0.89)
df_for_rating <- exp_results %>%
filter(stim_type == T) %>%
filter(c_name %in% very_inaccurate$c_name) %>%
group_by(lvl, c_name, branch, img) %>%
summarise(rt_median = median(react_time), acc_median = median(accurate)) %>%
mutate(lvl = ifelse(lvl=='hyponym', 'sub', ifelse(lvl=='hypernym', 'super', 'bl')))
all_img <- unique(df_for_rating$img)
df_rated_simple2 <- data.frame()
for (imag in all_img){
triple <- df_for_rating %>%
filter(img == imag)
blvl <- triple[which(triple$rt_median == min(triple$rt_median)),]
triple <- triple[which(triple$rt_median != min(triple$rt_median)),]
blvl$proj_lvl <- 'bl'
if(length(blvl$lvl)>1){
print("Two fastest times")
} else if(blvl$lvl == 'super'){
triple$proj_lvl <- 'sub'
df_rated_simple2 <- rbind(df_rated_simple2, blvl)
df_rated_simple2 <- rbind(df_rated_simple2, triple)
} else if(blvl$lvl == 'bl'){
sublvl <- triple[which(triple$lvl == "sub"),]
sublvl$proj_lvl <- "sub"
suplvl <- triple[which(triple$lvl == "super"),]
suplvl$proj_lvl <- "super"
df_rated_simple2 <- rbind(df_rated_simple2, suplvl)
df_rated_simple2 <- rbind(df_rated_simple2, blvl)
df_rated_simple2 <- rbind(df_rated_simple2, sublvl)
} else{
triple$proj_lvl <- 'super'
df_rated_simple2 <- rbind(df_rated_simple2, blvl)
df_rated_simple2 <- rbind(df_rated_simple2, triple)
}
}
df_rated_simple2$lvl <- as.factor(df_rated_simple2$lvl)
df_rated_simple2$proj_lvl <- as.factor(df_rated_simple2$proj_lvl)
head(df_rated_simple2[c("c_name", "lvl", "proj_lvl")], n = 9)
library(caret)
con_mat_bl <- confusionMatrix(data=df_rated_simple$proj_lvl, reference = df_rated_simple$lvl)
con_mat_bl
con_mat_bl2 <- confusionMatrix(data=df_rated_simple2$proj_lvl, reference = df_rated_simple2$lvl)
View(very_inaccurate)
very_inaccurate <- exp_results %>%
group_by(c_name) %>%
summarise(acc = mean(accurate)) %>%
filter(acc > 0.89)
View(very_inaccurate)
very_accurate <- exp_results %>%
group_by(c_name) %>%
summarise(acc = mean(accurate)) %>%
filter(acc > 0.89)
df_for_rating <- exp_results %>%
filter(stim_type == T) %>%
filter(c_name %in% very_accurate$c_name) %>%
group_by(lvl, c_name, branch, img) %>%
summarise(rt_median = median(react_time), acc_median = median(accurate)) %>%
mutate(lvl = ifelse(lvl=='hyponym', 'sub', ifelse(lvl=='hypernym', 'super', 'bl')))
all_img <- unique(df_for_rating$img)
df_rated_simple2 <- data.frame()
for (imag in all_img){
triple <- df_for_rating %>%
filter(img == imag)
blvl <- triple[which(triple$rt_median == min(triple$rt_median)),]
triple <- triple[which(triple$rt_median != min(triple$rt_median)),]
blvl$proj_lvl <- 'bl'
if(length(blvl$lvl)>1){
print("Two fastest times")
} else if(blvl$lvl == 'super'){
triple$proj_lvl <- 'sub'
df_rated_simple2 <- rbind(df_rated_simple2, blvl)
df_rated_simple2 <- rbind(df_rated_simple2, triple)
} else if(blvl$lvl == 'bl'){
sublvl <- triple[which(triple$lvl == "sub"),]
sublvl$proj_lvl <- "sub"
suplvl <- triple[which(triple$lvl == "super"),]
suplvl$proj_lvl <- "super"
df_rated_simple2 <- rbind(df_rated_simple2, suplvl)
df_rated_simple2 <- rbind(df_rated_simple2, blvl)
df_rated_simple2 <- rbind(df_rated_simple2, sublvl)
} else{
triple$proj_lvl <- 'super'
df_rated_simple2 <- rbind(df_rated_simple2, blvl)
df_rated_simple2 <- rbind(df_rated_simple2, triple)
}
}
df_rated_simple2$lvl <- as.factor(df_rated_simple2$lvl)
df_rated_simple2$proj_lvl <- as.factor(df_rated_simple2$proj_lvl)
head(df_rated_simple2[c("c_name", "lvl", "proj_lvl")], n = 9)
library(caret)
con_mat_bl <- confusionMatrix(data=df_rated_simple$proj_lvl, reference = df_rated_simple$lvl)
con_mat_bl
con_mat_bl2 <- confusionMatrix(data=df_rated_simple2$proj_lvl, reference = df_rated_simple2$lvl)
con_mat_bl2
###########################################################################################
# CHANGE THIS > Path to computed results folder here (generated from jupyter notebook)    #
r_folder <- "../Past_experiments/E1/computed_data/"
###########################################################################################
# Declaring files containing answers and participants.
results_file = paste(r_folder,"data_all_ans.csv", sep="")
#participant_file = paste(r_folder,"data_all_participants.csv", sep="")
participant_file = "D:/VU/BL_CrowdGauge-BACKUP/Past_experiments/E1/computed_data/data_all_participants.csv"
# Loading data
results <- read_csv(results_file, col_types = cols('i','i','l','c','c','f','c','l','f','i','i'))
participants <- read_csv(participant_file, col_types=cols('f','n', 'i','n','n','l', 'l','f','i'))
# Splitting the data set into results from the training round and from the experiment round.
exp_results <- results %>%
filter(final == T) %>%
mutate(c_name = str_replace_all(str_remove(c_name, '_n_0[:digit:]'),pattern = '_',replacement = ' ')) %>%
mutate(img = as.factor(str_replace_all(str_remove(img, '_n_0[:digit:]'),pattern = '_',replacement = ' '))) %>%
mutate(branch = as.factor(str_replace_all(str_remove(branch, '_n_0[:digit:]'),pattern = '_',replacement = ' '))) %>%
mutate(stimulus = as.factor(paste(c_name, img, sep = "|")))
train_results <- results %>%
filter(final == F) %>%
mutate(c_name = str_replace_all(str_remove(c_name, '_n_0[:digit:]'),pattern = '_',replacement = ' '))  %>%
mutate(img = as.factor(str_replace_all(str_remove(img, '_n_0[:digit:]'),pattern = '_',replacement = ' '))) %>%
mutate(branch = as.factor(str_replace_all(str_remove(branch, '_n_0[:digit:]'),pattern = '_',replacement = ' '))) %>%
mutate(stimulus = as.factor(paste(c_name, img, sep = "|")))
# Some constants needed in latter calculations.
trial_num <- length(exp_results$index)
p_num <- length(unique(exp_results$p_id))
part_id <- sort(c(1:trial_num)%%p_num)+1
stim_num <- trial_num/p_num
View(p_info)
summary(participants)
View(exp1)
df_for_rating <- exp_results %>%
group_by(lvl, c_name, branch, img) %>%
summarise(rt_mean = mean(react_time), acc_mean = mean(accurate)) %>%
mutate(lvl = ifelse(lvl=='hyponym', 'sub', ifelse(lvl=='hypernym', 'super', 'bl')))
all_img <- unique(df_for_rating$img)
df_rated_simple <- data.frame()
for (imag in all_img){
triple <- df_for_rating %>%
filter(img == imag)
blvl <- triple[which(triple$rt_mean == min(triple$rt_mean)),]
triple <- triple[which(triple$rt_mean != min(triple$rt_mean)),]
blvl$proj_lvl <- 'bl'
if(blvl$lvl == 'super'){
triple$proj_lvl <- 'sub'
df_rated_simple <- rbind(df_rated_simple, blvl)
df_rated_simple <- rbind(df_rated_simple, triple)
} else if(blvl$lvl == 'bl'){
sublvl <- triple[which(triple$lvl == "sub"),]
sublvl$proj_lvl <- "sub"
suplvl <- triple[which(triple$lvl == "super"),]
suplvl$proj_lvl <- "super"
df_rated_simple <- rbind(df_rated_simple, suplvl)
df_rated_simple <- rbind(df_rated_simple, blvl)
df_rated_simple <- rbind(df_rated_simple, sublvl)
} else{
triple$proj_lvl <- 'super'
df_rated_simple <- rbind(df_rated_simple, blvl)
df_rated_simple <- rbind(df_rated_simple, triple)
}
}
df_rated_simple$lvl <- as.factor(df_rated_simple$lvl)
df_rated_simple$proj_lvl <- as.factor(df_rated_simple$proj_lvl)
head(df_rated_simple[c("c_name", "lvl", "proj_lvl")], n = 9)
library(caret)
con_mat_bl <- confusionMatrix(data=df_rated_simple$proj_lvl, reference = df_rated_simple$lvl)
con_mat_bl
con_mat_bl2 <- confusionMatrix(data=df_rated_simple2$proj_lvl, reference = df_rated_simple2$lvl)
con_mat_bl2
df_for_rating <- exp_results %>%
filter(stim_type == T) %>%
group_by(lvl, c_name, branch, img) %>%
summarise(rt_mean = mean(react_time), acc_mean = mean(accurate)) %>%
mutate(lvl = ifelse(lvl=='hyponym', 'sub', ifelse(lvl=='hypernym', 'super', 'bl')))
all_img <- unique(df_for_rating$img)
df_rated_simple <- data.frame()
for (imag in all_img){
triple <- df_for_rating %>%
filter(img == imag)
blvl <- triple[which(triple$rt_mean == min(triple$rt_mean)),]
triple <- triple[which(triple$rt_mean != min(triple$rt_mean)),]
blvl$proj_lvl <- 'bl'
if(blvl$lvl == 'super'){
triple$proj_lvl <- 'sub'
df_rated_simple <- rbind(df_rated_simple, blvl)
df_rated_simple <- rbind(df_rated_simple, triple)
} else if(blvl$lvl == 'bl'){
sublvl <- triple[which(triple$lvl == "sub"),]
sublvl$proj_lvl <- "sub"
suplvl <- triple[which(triple$lvl == "super"),]
suplvl$proj_lvl <- "super"
df_rated_simple <- rbind(df_rated_simple, suplvl)
df_rated_simple <- rbind(df_rated_simple, blvl)
df_rated_simple <- rbind(df_rated_simple, sublvl)
} else{
triple$proj_lvl <- 'super'
df_rated_simple <- rbind(df_rated_simple, blvl)
df_rated_simple <- rbind(df_rated_simple, triple)
}
}
df_rated_simple$lvl <- as.factor(df_rated_simple$lvl)
df_rated_simple$proj_lvl <- as.factor(df_rated_simple$proj_lvl)
head(df_rated_simple[c("c_name", "lvl", "proj_lvl")], n = 9)
df_for_rating <- exp_results %>%
filter(stim_type == T) %>%
group_by(lvl, c_name, branch, img) %>%
summarise(rt_median = median(react_time), acc_median = median(accurate)) %>%
mutate(lvl = ifelse(lvl=='hyponym', 'sub', ifelse(lvl=='hypernym', 'super', 'bl')))
all_img <- unique(df_for_rating$img)
df_rated_simple2 <- data.frame()
for (imag in all_img){
triple <- df_for_rating %>%
filter(img == imag)
blvl <- triple[which(triple$rt_median == min(triple$rt_median)),]
triple <- triple[which(triple$rt_median != min(triple$rt_median)),]
blvl$proj_lvl <- 'bl'
if(length(blvl$lvl)>1){
print("Two fastest times")
} else if(blvl$lvl == 'super'){
triple$proj_lvl <- 'sub'
df_rated_simple2 <- rbind(df_rated_simple2, blvl)
df_rated_simple2 <- rbind(df_rated_simple2, triple)
} else if(blvl$lvl == 'bl'){
sublvl <- triple[which(triple$lvl == "sub"),]
sublvl$proj_lvl <- "sub"
suplvl <- triple[which(triple$lvl == "super"),]
suplvl$proj_lvl <- "super"
df_rated_simple2 <- rbind(df_rated_simple2, suplvl)
df_rated_simple2 <- rbind(df_rated_simple2, blvl)
df_rated_simple2 <- rbind(df_rated_simple2, sublvl)
} else{
triple$proj_lvl <- 'super'
df_rated_simple2 <- rbind(df_rated_simple2, blvl)
df_rated_simple2 <- rbind(df_rated_simple2, triple)
}
}
df_rated_simple2$lvl <- as.factor(df_rated_simple2$lvl)
df_rated_simple2$proj_lvl <- as.factor(df_rated_simple2$proj_lvl)
head(df_rated_simple2[c("c_name", "lvl", "proj_lvl")], n = 9)
library(caret)
con_mat_bl <- confusionMatrix(data=df_rated_simple$proj_lvl, reference = df_rated_simple$lvl)
con_mat_bl
con_mat_bl2 <- confusionMatrix(data=df_rated_simple2$proj_lvl, reference = df_rated_simple2$lvl)
con_mat_bl2
###########################################################################################
# CHANGE THIS > Path to computed results folder here (generated from jupyter notebook)    #
r_folder <- "../Past_experiments/E2/computed_data/"
###########################################################################################
# Declaring files containing answers and participants.
results_file = paste(r_folder,"data_all_ans.csv", sep="")
#participant_file = paste(r_folder,"data_all_participants.csv", sep="")
participant_file = "D:/VU/BL_CrowdGauge-BACKUP/Past_experiments/E1/computed_data/data_all_participants.csv"
# Loading data
results <- read_csv(results_file, col_types = cols('i','i','l','c','c','f','c','l','f','i','i'))
participants <- read_csv(participant_file, col_types=cols('f','n', 'i','n','n','l', 'l','f','i'))
# Splitting the data set into results from the training round and from the experiment round.
exp_results <- results %>%
filter(final == T) %>%
mutate(c_name = str_replace_all(str_remove(c_name, '_n_0[:digit:]'),pattern = '_',replacement = ' ')) %>%
mutate(img = as.factor(str_replace_all(str_remove(img, '_n_0[:digit:]'),pattern = '_',replacement = ' '))) %>%
mutate(branch = as.factor(str_replace_all(str_remove(branch, '_n_0[:digit:]'),pattern = '_',replacement = ' '))) %>%
mutate(stimulus = as.factor(paste(c_name, img, sep = "|")))
train_results <- results %>%
filter(final == F) %>%
mutate(c_name = str_replace_all(str_remove(c_name, '_n_0[:digit:]'),pattern = '_',replacement = ' '))  %>%
mutate(img = as.factor(str_replace_all(str_remove(img, '_n_0[:digit:]'),pattern = '_',replacement = ' '))) %>%
mutate(branch = as.factor(str_replace_all(str_remove(branch, '_n_0[:digit:]'),pattern = '_',replacement = ' '))) %>%
mutate(stimulus = as.factor(paste(c_name, img, sep = "|")))
# Some constants needed in latter calculations.
trial_num <- length(exp_results$index)
p_num <- length(unique(exp_results$p_id))
part_id <- sort(c(1:trial_num)%%p_num)+1
stim_num <- trial_num/p_num
###########################################################################################
# CHANGE THIS > Path to computed results folder here (generated from jupyter notebook)    #
r_folder <- "../Past_experiments/E2/computed_data/"
###########################################################################################
# Declaring files containing answers and participants.
results_file = paste(r_folder,"data_all_ans.csv", sep="")
#participant_file = paste(r_folder,"data_all_participants.csv", sep="")
participant_file = "D:/VU/BL_CrowdGauge-BACKUP/Past_experiments/E2/computed_data/data_all_participants.csv"
# Loading data
results <- read_csv(results_file, col_types = cols('i','i','l','c','c','f','c','l','f','i','i'))
participants <- read_csv(participant_file, col_types=cols('f','n', 'i','n','n','l', 'l','f','i'))
# Splitting the data set into results from the training round and from the experiment round.
exp_results <- results %>%
filter(final == T) %>%
mutate(c_name = str_replace_all(str_remove(c_name, '_n_0[:digit:]'),pattern = '_',replacement = ' ')) %>%
mutate(img = as.factor(str_replace_all(str_remove(img, '_n_0[:digit:]'),pattern = '_',replacement = ' '))) %>%
mutate(branch = as.factor(str_replace_all(str_remove(branch, '_n_0[:digit:]'),pattern = '_',replacement = ' '))) %>%
mutate(stimulus = as.factor(paste(c_name, img, sep = "|")))
train_results <- results %>%
filter(final == F) %>%
mutate(c_name = str_replace_all(str_remove(c_name, '_n_0[:digit:]'),pattern = '_',replacement = ' '))  %>%
mutate(img = as.factor(str_replace_all(str_remove(img, '_n_0[:digit:]'),pattern = '_',replacement = ' '))) %>%
mutate(branch = as.factor(str_replace_all(str_remove(branch, '_n_0[:digit:]'),pattern = '_',replacement = ' '))) %>%
mutate(stimulus = as.factor(paste(c_name, img, sep = "|")))
# Some constants needed in latter calculations.
trial_num <- length(exp_results$index)
p_num <- length(unique(exp_results$p_id))
part_id <- sort(c(1:trial_num)%%p_num)+1
stim_num <- trial_num/p_num
#!!!! Used during Thesis, not generalized
exp1 <- read_csv("../Past_experiments/E1/computed_data/data_all_ans.csv", col_types = cols('i','i','l','c','c','f','c','l','i','i','i'))
exp2 <- read_csv("../Past_experiments/E2/computed_data/data_all_ans.csv", col_types = cols('i','i','l','c','c','f','c','l','i','i','i')) %>%
filter(final==F) %>%
mutate(p_id=p_id+200)
all_exp_results <- rbind(exp1, exp2)
p_ids = append(c(1:24),c(201:212))
eng_nat = c(F,F,F,F,F,F,F,T,F,F,F,F,F,F,T,F,F,F,F,F,F,F,F,F,F,T,T,T,T,T,T,T,T,T,F,T)
p_info <- data.frame("p_id"=p_ids, "is_nat_eng"=eng_nat)
all_exp_results <- merge(all_exp_results, p_info, all.x = T) %>%
mutate(p_id=as.factor(p_id))
df_for_rating <- exp_results %>%
filter(stim_type == T) %>%
group_by(lvl, c_name, branch, img) %>%
summarise(rt_mean = mean(react_time), acc_mean = mean(accurate)) %>%
mutate(lvl = ifelse(lvl=='hyponym', 'sub', ifelse(lvl=='hypernym', 'super', 'bl')))
all_img <- unique(df_for_rating$img)
df_rated_simple <- data.frame()
for (imag in all_img){
triple <- df_for_rating %>%
filter(img == imag)
blvl <- triple[which(triple$rt_mean == min(triple$rt_mean)),]
triple <- triple[which(triple$rt_mean != min(triple$rt_mean)),]
blvl$proj_lvl <- 'bl'
if(blvl$lvl == 'super'){
triple$proj_lvl <- 'sub'
df_rated_simple <- rbind(df_rated_simple, blvl)
df_rated_simple <- rbind(df_rated_simple, triple)
} else if(blvl$lvl == 'bl'){
sublvl <- triple[which(triple$lvl == "sub"),]
sublvl$proj_lvl <- "sub"
suplvl <- triple[which(triple$lvl == "super"),]
suplvl$proj_lvl <- "super"
df_rated_simple <- rbind(df_rated_simple, suplvl)
df_rated_simple <- rbind(df_rated_simple, blvl)
df_rated_simple <- rbind(df_rated_simple, sublvl)
} else{
triple$proj_lvl <- 'super'
df_rated_simple <- rbind(df_rated_simple, blvl)
df_rated_simple <- rbind(df_rated_simple, triple)
}
}
df_rated_simple$lvl <- as.factor(df_rated_simple$lvl)
df_rated_simple$proj_lvl <- as.factor(df_rated_simple$proj_lvl)
head(df_rated_simple[c("c_name", "lvl", "proj_lvl")], n = 9)
df_for_rating <- exp_results %>%
filter(stim_type == T) %>%
group_by(lvl, c_name, branch, img) %>%
summarise(rt_median = median(react_time), acc_median = median(accurate)) %>%
mutate(lvl = ifelse(lvl=='hyponym', 'sub', ifelse(lvl=='hypernym', 'super', 'bl')))
all_img <- unique(df_for_rating$img)
df_rated_simple2 <- data.frame()
for (imag in all_img){
triple <- df_for_rating %>%
filter(img == imag)
blvl <- triple[which(triple$rt_median == min(triple$rt_median)),]
triple <- triple[which(triple$rt_median != min(triple$rt_median)),]
blvl$proj_lvl <- 'bl'
if(length(blvl$lvl)>1){
print("Two fastest times")
} else if(blvl$lvl == 'super'){
triple$proj_lvl <- 'sub'
df_rated_simple2 <- rbind(df_rated_simple2, blvl)
df_rated_simple2 <- rbind(df_rated_simple2, triple)
} else if(blvl$lvl == 'bl'){
sublvl <- triple[which(triple$lvl == "sub"),]
sublvl$proj_lvl <- "sub"
suplvl <- triple[which(triple$lvl == "super"),]
suplvl$proj_lvl <- "super"
df_rated_simple2 <- rbind(df_rated_simple2, suplvl)
df_rated_simple2 <- rbind(df_rated_simple2, blvl)
df_rated_simple2 <- rbind(df_rated_simple2, sublvl)
} else{
triple$proj_lvl <- 'super'
df_rated_simple2 <- rbind(df_rated_simple2, blvl)
df_rated_simple2 <- rbind(df_rated_simple2, triple)
}
}
df_rated_simple2$lvl <- as.factor(df_rated_simple2$lvl)
df_rated_simple2$proj_lvl <- as.factor(df_rated_simple2$proj_lvl)
head(df_rated_simple2[c("c_name", "lvl", "proj_lvl")], n = 9)
library(caret)
con_mat_bl <- confusionMatrix(data=df_rated_simple$proj_lvl, reference = df_rated_simple$lvl)
con_mat_bl
con_mat_bl2 <- confusionMatrix(data=df_rated_simple2$proj_lvl, reference = df_rated_simple2$lvl)
con_mat_bl2
################################################################################
####        Library imports and setting general theme of the plots          ####
################################################################################
library(dplyr)
library(readr)
library(ggplot2)
library("gridExtra")
library(tidyverse)
library(ggthemes)
library(hash)
old <- theme_set(theme_stata())
###########################################################################################
# CHANGE THIS > Path to computed results folder here (generated from jupyter notebook)    #
r_folder <- "../Past_experiments/E2/computed_data/"
###########################################################################################
# Declaring files containing answers and participants.
results_file = paste(r_folder,"data_all_ans.csv", sep="")
#participant_file = paste(r_folder,"data_all_participants.csv", sep="")
participant_file = "D:/VU/BL_CrowdGauge-BACKUP/Past_experiments/E2/computed_data/data_all_participants.csv"
# Loading data
results <- read_csv(results_file, col_types = cols('i','i','l','c','c','f','c','l','f','i','i'))
participants <- read_csv(participant_file, col_types=cols('f','n', 'i','n','n','l', 'l','f','i'))
# Splitting the data set into results from the training round and from the experiment round.
exp_results <- results %>%
filter(final == T) %>%
mutate(c_name = str_replace_all(str_remove(c_name, '_n_0[:digit:]'),pattern = '_',replacement = ' ')) %>%
mutate(img = as.factor(str_replace_all(str_remove(img, '_n_0[:digit:]'),pattern = '_',replacement = ' '))) %>%
mutate(branch = as.factor(str_replace_all(str_remove(branch, '_n_0[:digit:]'),pattern = '_',replacement = ' '))) %>%
mutate(stimulus = as.factor(paste(c_name, img, sep = "|")))
train_results <- results %>%
filter(final == F) %>%
mutate(c_name = str_replace_all(str_remove(c_name, '_n_0[:digit:]'),pattern = '_',replacement = ' '))  %>%
mutate(img = as.factor(str_replace_all(str_remove(img, '_n_0[:digit:]'),pattern = '_',replacement = ' '))) %>%
mutate(branch = as.factor(str_replace_all(str_remove(branch, '_n_0[:digit:]'),pattern = '_',replacement = ' '))) %>%
mutate(stimulus = as.factor(paste(c_name, img, sep = "|")))
# Some constants needed in latter calculations.
trial_num <- length(exp_results$index)
p_num <- length(unique(exp_results$p_id))
part_id <- sort(c(1:trial_num)%%p_num)+1
stim_num <- trial_num/p_num
stims <- exp_results %>%
filter(stim_type == T) %>%
group_by(c_name, img, branch) %>%
summarise(acc = mean(react_time)) %>%
arrange(-desc(img)) %>%
arrange(-desc(branch))
stims
View(data)
View(data_part)
View(df_for_rating)
View(candidates)
View(candidates2)
View(con_mat_bl2)
View(con_mat_bl)
View(data)
View(df_for_rating_)
View(df_rated_simple)
View(exp_results)
View(exp2)
View(exp1)
